from __future__ import annotations

import asyncio
import logging
from typing import Any

from aiogram.types import Message

from app.services.localization import Localization


class ProgressBar:
    """–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self, message: Message) -> None:
        self._message = message
        self._logger = logging.getLogger(__name__)
        self._current_step = 0
        self._total_steps = 0
        self._status_message: Message | None = None
        self._steps: list[str] = []
    
    async def start(self, steps: list[str]) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        self._steps = steps
        self._total_steps = len(steps)
        self._current_step = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        progress_text = self._get_progress_text()
        self._status_message = await self._message.reply(progress_text)
    
    async def update(self, step_index: int, custom_text: str | None = None) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        if step_index < 0 or step_index >= self._total_steps:
            return
        
        self._current_step = step_index
        progress_text = self._get_progress_text(custom_text)
        
        if self._status_message:
            try:
                await self._status_message.edit_text(progress_text)
            except Exception as e:
                self._logger.warning("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞: %s", e)
    
    async def complete(self, success_text: str = "‚úÖ –ì–æ—Ç–æ–≤–æ!") -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        if self._status_message:
            try:
                await self._status_message.edit_text(success_text)
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                await asyncio.sleep(3)
                await self._status_message.delete()
            except Exception as e:
                self._logger.warning("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞: %s", e)
    
    async def error(self, error_text: str) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–µ"""
        if self._status_message:
            try:
                await self._status_message.edit_text(f"‚ùå {error_text}")
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(5)
                await self._status_message.delete()
            except Exception as e:
                self._logger.warning("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏: %s", e)
    
    def _get_progress_text(self, custom_text: str | None = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        if custom_text:
            current_step_text = custom_text
        else:
            current_step_text = self._steps[self._current_step] if self._current_step < len(self._steps) else ""
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_percent = (self._current_step + 1) / self._total_steps * 100
        filled_bars = int(progress_percent / 10)
        empty_bars = 10 - filled_bars
        
        progress_bar = "üü©" * filled_bars + "‚¨ú" * empty_bars
        
        return (
            f"üîÑ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ</b>\n\n"
            f"{progress_bar} {progress_percent:.0f}%\n\n"
            f"üìã <b>–≠—Ç–∞–ø {self._current_step + 1}/{self._total_steps}:</b>\n"
            f"{current_step_text}"
        )


class TikTokProgressBar(ProgressBar):
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è TikTok"""
    
    def __init__(self, message: Message, loc: Localization) -> None:
        super().__init__(message)
        self._loc = loc
        self._steps = [
            loc.get("progress_analyzing"),
            loc.get("progress_getting"), 
            loc.get("progress_downloading"),
            loc.get("progress_sending")
        ]
    
    async def _update_status(self, text: str) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if self._status_message:
            await self._status_message.edit_text(text)
        else:
            self._status_message = await self._message.reply(text)
    
    async def start_download(self) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        await self._update_status(self._loc.get("progress_start"))
    
    async def analyzing_url(self) -> None:
        """–≠—Ç–∞–ø –∞–Ω–∞–ª–∏–∑–∞ URL"""
        await self.update(0)
    
    async def getting_video(self) -> None:
        """–≠—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ"""
        await self.update(1)
    
    async def downloading_file(self) -> None:
        """–≠—Ç–∞–ø —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        await self.update(2)
    
    async def sending_video(self) -> None:
        """–≠—Ç–∞–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ"""
        await self.update(3)
    
    async def success(self) -> None:
        """–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
        await self.complete("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    
    async def error_occurred(self, error_msg: str) -> None:
        """–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏"""
        await self.error(f"–û—à–∏–±–∫–∞: {error_msg}")
