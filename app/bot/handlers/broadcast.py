from __future__ import annotations

import asyncio
import logging
from typing import Any

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from app.config.settings import Settings
from app.services.user_storage import user_storage
from app.services.localization import get_localization
from app.services.user_language import user_language_storage


def setup_broadcast_handlers(settings: Settings) -> tuple[Router, dict[int, dict[str, Any]]]:
    router = Router()
    logger = logging.getLogger(__name__)

    # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∏
    _broadcast_data: dict[int, dict[str, Any]] = {}

    @router.message(Command("broadcast"))
    async def start_broadcast(message: Message) -> None:
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if message.from_user is None or message.from_user.id not in set(settings.admin_ids):
            return

        admin_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∞
        user_language = user_language_storage.get_language(admin_id)
        loc = get_localization(user_language)
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if admin_id in _broadcast_data:
            del _broadcast_data[admin_id]

        user_count = user_storage.get_user_count()
        
        if user_count == 0:
            await message.answer(loc.get("broadcast_no_users"))
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        _broadcast_data[admin_id] = {}

        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=loc.get("broadcast_stats"),
                        callback_data="broadcast_stats"
                    )
                ]
            ]
        )

        await message.answer(
            loc.get("broadcast_start", user_count=user_count),
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    def is_admin_in_broadcast_mode(message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not message.from_user or message.from_user.id not in set(settings.admin_ids):
            return False
        if not (message.text or message.photo or message.video or message.document or message.audio):
            return False
        if message.text and message.text.startswith("/"):
            return False
        return message.from_user.id in _broadcast_data

    @router.message(is_admin_in_broadcast_mode)
    async def handle_broadcast_content(message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        admin_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∞
        user_language = user_language_storage.get_language(admin_id)
        loc = get_localization(user_language)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if "content" in _broadcast_data[admin_id]:
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        _broadcast_data[admin_id]["content"] = message

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=loc.get("broadcast_send"),
                        callback_data="broadcast_confirm:yes"
                    ),
                    InlineKeyboardButton(
                        text=loc.get("broadcast_cancel"),
                        callback_data="broadcast_confirm:no"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=loc.get("broadcast_preview"),
                        callback_data="broadcast_preview"
                    )
                ]
            ]
        )

        user_count = user_storage.get_user_count()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        message_type = loc.get("message_type_text")
        if message.photo:
            message_type = loc.get("message_type_photo")
        elif message.video:
            message_type = loc.get("message_type_video")
        elif message.document:
            message_type = loc.get("message_type_document")
        elif message.audio:
            message_type = loc.get("message_type_audio")
        
        await message.answer(
            loc.get("broadcast_confirm", user_count=user_count, message_type=message_type),
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    @router.callback_query(lambda c: c.data == "broadcast_preview")
    async def handle_broadcast_preview(callback: CallbackQuery) -> None:
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if callback.from_user is None or callback.from_user.id not in set(settings.admin_ids):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        admin_id = callback.from_user.id
        if admin_id not in _broadcast_data or "content" not in _broadcast_data[admin_id]:
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞", show_alert=True)
            return

        content_message = _broadcast_data[admin_id]["content"]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        try:
            if content_message.text:
                await callback.message.answer(
                    f"üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{content_message.text}",
                    parse_mode="HTML"
                )
            elif content_message.photo:
                caption = f"üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{content_message.caption or ''}"
                await callback.message.answer_photo(
                    content_message.photo[-1].file_id,
                    caption=caption,
                    parse_mode="HTML"
                )
            elif content_message.video:
                caption = f"üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{content_message.caption or ''}"
                await callback.message.answer_video(
                    content_message.video.file_id,
                    caption=caption,
                    parse_mode="HTML"
                )
            elif content_message.document:
                caption = f"üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{content_message.caption or ''}"
                await callback.message.answer_document(
                    content_message.document.file_id,
                    caption=caption,
                    parse_mode="HTML"
                )
            elif content_message.audio:
                caption = f"üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{content_message.caption or ''}"
                await callback.message.answer_audio(
                    content_message.audio.file_id,
                    caption=caption,
                    parse_mode="HTML"
                )
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: %s", e)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞", show_alert=True)
            return

        await callback.answer("‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    @router.callback_query(lambda c: c.data.startswith("broadcast_confirm:"))
    async def handle_broadcast_confirm(callback: CallbackQuery) -> None:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if callback.from_user is None or callback.from_user.id not in set(settings.admin_ids):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        admin_id = callback.from_user.id
        action = callback.data.split(":", 1)[1]

        if action == "no":
            # –û—Ç–º–µ–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            if admin_id in _broadcast_data:
                del _broadcast_data[admin_id]
            await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            await callback.answer()
            return

        if admin_id not in _broadcast_data or "content" not in _broadcast_data[admin_id]:
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
            return

        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        await callback.message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...")
        await callback.answer()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(send_broadcast(admin_id, callback.message.bot))

    @router.callback_query(lambda c: c.data == "broadcast_stats")
    async def handle_broadcast_stats(callback: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if callback.from_user is None or callback.from_user.id not in set(settings.admin_ids):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        users = user_storage.get_all_users()
        user_count = len(users)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        with_username = sum(1 for u in users if u.username)
        with_first_name = sum(1 for u in users if u.first_name)
        
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{user_count}</b>\n"
            f"üè∑Ô∏è –° username: <b>{with_username}</b>\n"
            f"üë§ –° –∏–º–µ–Ω–µ–º: <b>{with_first_name}</b>\n\n"
            f"üìà –ì–æ—Ç–æ–≤—ã –∫ —Ä–∞—Å—Å—ã–ª–∫–µ: <b>{user_count}</b>"
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data="broadcast_stats"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data="broadcast_back"
                    )
                ]
            ]
        )

        await callback.message.edit_text(stats_text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    @router.callback_query(lambda c: c.data == "broadcast_back")
    async def handle_broadcast_back(callback: CallbackQuery) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if callback.from_user is None or callback.from_user.id not in set(settings.admin_ids):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        user_count = user_storage.get_user_count()
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                        callback_data="broadcast_stats"
                    )
                ]
            ]
        )

        await callback.message.edit_text(
            f"üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: <b>{user_count}</b>\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
            f"‚Ä¢ üìù –¢–µ–∫—Å—Ç\n"
            f"‚Ä¢ üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            f"‚Ä¢ üìπ –í–∏–¥–µ–æ\n"
            f"‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç\n"
            f"‚Ä¢ üéµ –ê—É–¥–∏–æ",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    async def send_broadcast(admin_id: int, bot) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if admin_id not in _broadcast_data or "content" not in _broadcast_data[admin_id]:
            return

        content_message = _broadcast_data[admin_id]["content"]
        users = user_storage.get_all_users()
        
        success_count = 0
        error_count = 0
        
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", len(users))

        for user_info in users:
            try:
                if content_message.text:
                    await bot.send_message(
                        user_info.user_id,
                        content_message.text,
                        parse_mode="HTML"
                    )
                elif content_message.photo:
                    await bot.send_photo(
                        user_info.user_id,
                        content_message.photo[-1].file_id,
                        caption=content_message.caption,
                        parse_mode="HTML"
                    )
                elif content_message.video:
                    await bot.send_video(
                        user_info.user_id,
                        content_message.video.file_id,
                        caption=content_message.caption,
                        parse_mode="HTML"
                    )
                elif content_message.document:
                    await bot.send_document(
                        user_info.user_id,
                        content_message.document.file_id,
                        caption=content_message.caption,
                        parse_mode="HTML"
                    )
                elif content_message.audio:
                    await bot.send_audio(
                        user_info.user_id,
                        content_message.audio.file_id,
                        caption=content_message.caption,
                        parse_mode="HTML"
                    )
                
                success_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(0.1)
                
            except Exception as e:
                error_count += 1
                logger.warning("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %s", user_info.user_id, e)
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                if "bot was blocked" in str(e).lower():
                    user_storage.remove_user(user_info.user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
        try:
            await bot.send_message(
                admin_id,
                f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{success_count}</b>\n"
                f"‚ùå –û—à–∏–±–æ–∫: <b>{error_count}</b>\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <b>{len(users)}</b>",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É: %s", e)

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if admin_id in _broadcast_data:
            del _broadcast_data[admin_id]

        logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: %d —É—Å–ø–µ—à–Ω–æ, %d –æ—à–∏–±–æ–∫", success_count, error_count)

    @router.message(Command("broadcast_reset"))
    async def reset_broadcast_state(message: Message) -> None:
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if message.from_user is None or message.from_user.id not in set(settings.admin_ids):
            return

        admin_id = message.from_user.id
        
        if admin_id in _broadcast_data:
            del _broadcast_data[admin_id]
            await message.answer("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—à–µ–Ω–æ")
        else:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏")

    return router, _broadcast_data
